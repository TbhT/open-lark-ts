(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[155],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||s;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6439:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c},default:function(){return p}});var a=n(2122),r=n(9756),s=(n(7294),n(3905)),i={sidebar_position:1},o={unversionedId:"api/bot",id:"api/bot",isDocsHomePage:!1,title:"Bot",description:"This part is for bot, and you need not be family with rxjs",source:"@site/docs/api/bot.md",sourceDirName:"api",slug:"/api/bot",permalink:"/open-lark-ts/docs/api/bot",editUrl:"https://github.com/TbhT/open-lark-ts/edit/master/website/docs/docs/api/bot.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/open-lark-ts/docs/tutorial-extras/translate-your-site"}},c=[{value:"init",id:"init",children:[]},{value:"BotEventType",id:"boteventtype",children:[{value:"INITIATING",id:"initiating",children:[]},{value:"INITIAL_COMPLETE",id:"initial_complete",children:[]},{value:"ERROR",id:"error",children:[]},{value:"RECEIVE_MESSAGE",id:"receive_message",children:[]},{value:"RECEIVE_TEXT_MESSAGE",id:"receive_text_message",children:[]},{value:"RECEIVE_IMAGE_MESSAGE",id:"receive_image_message",children:[]},{value:"RECEIVE_RICH_TEXT_MESSAGE",id:"receive_rich_text_message",children:[]},{value:"MESSAGE_ERROR",id:"message_error",children:[]}]},{value:"sayTextMessage",id:"saytextmessage",children:[]},{value:"sayImageMessage",id:"sayimagemessage",children:[]},{value:"recallMessage",id:"recallmessage",children:[]},{value:"sayRichTextMessage",id:"sayrichtextmessage",children:[]},{value:"sayUrgentMessage",id:"sayurgentmessage",children:[]}],l={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This part is for bot, and you need not be family with ",(0,s.kt)("inlineCode",{parentName:"p"},"rxjs")),(0,s.kt)("h2",{id:"init"},"init"),(0,s.kt)("p",null,"You can easily instance a Bot and register a listener, and the event type the bot supports is ",(0,s.kt)("a",{parentName:"p",href:"#boteventtype"},"bot event type")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Bot, BotEventType } from '@tbht/open-lark-rxjs'\n\nconst appId = 'your config appId'\nconst appSecret = 'your config appSecret'\n\nconst botInstance = new Bot({\n    appId,\n    appSecret\n})\n\nbotInstance.on(BotEventType.INITIAL_COMPLETE, () => {\n    console.log('\u673a\u5668\u4eba\u521d\u59cb\u5316\u5b8c\u6210')\n})\n\n")),(0,s.kt)("h2",{id:"boteventtype"},"BotEventType"),(0,s.kt)("p",null,"All BotEventType as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"enum BotEventType {\n  INITIATING = 'initiating',\n  INITIAL_COMPLETE = 'initial_complete',\n  ERROR = 'error',\n  RECEIVE_MESSAGE = 'receive_message',\n  RECEIVE_TEXT_MESSAGE = 'receive_text_message',\n  RECEIVE_IMAGE_MESSAGE = 'receive_image_message',\n  RECEIVE_RICH_TEXT_MESSAGE = 'receive_rich_text_message',\n  MESSAGE_ERROR = 'message_error'\n}\n")),(0,s.kt)("h3",{id:"initiating"},"INITIATING"),(0,s.kt)("p",null,"When create instance by ",(0,s.kt)("inlineCode",{parentName:"p"},"new")," operator, bot will send a request to get token for later use.\nThis event will be emitted when ",(0,s.kt)("inlineCode",{parentName:"p"},"new")," operator execute."),(0,s.kt)("h3",{id:"initial_complete"},"INITIAL_COMPLETE"),(0,s.kt)("p",null,"When bot get ",(0,s.kt)("inlineCode",{parentName:"p"},"tenant_access_token"),", the initial is completed. ",(0,s.kt)("inlineCode",{parentName:"p"},"INITIAL_COMPLETE")," will be emitted\nafter get the token successfully, otherwise the ",(0,s.kt)("inlineCode",{parentName:"p"},"BotEventType.ERROR")," event will be triggered."),(0,s.kt)("h3",{id:"error"},"ERROR"),(0,s.kt)("p",null,"This event type will be triggered when there has any error occur. "),(0,s.kt)("h3",{id:"receive_message"},"RECEIVE_MESSAGE"),(0,s.kt)("p",null,"This event type will be emitted if there is any message was successfully received."),(0,s.kt)("h3",{id:"receive_text_message"},"RECEIVE_TEXT_MESSAGE"),(0,s.kt)("h3",{id:"receive_image_message"},"RECEIVE_IMAGE_MESSAGE"),(0,s.kt)("h3",{id:"receive_rich_text_message"},"RECEIVE_RICH_TEXT_MESSAGE"),(0,s.kt)("h3",{id:"message_error"},"MESSAGE_ERROR"),(0,s.kt)("h2",{id:"saytextmessage"},"sayTextMessage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst { data, code, msg } = await botInstance.sayTextMessage({\n    userId: 'the user your want to send',\n    content: 'this is a bot text message'\n})\n\n")),(0,s.kt)("h2",{id:"sayimagemessage"},"sayImageMessage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst { code, data } = await botInstance.sayImageMessage({\n    userId: 'the user your want to send',\n    imageKey: 'image key'\n})\n\n")),(0,s.kt)("h2",{id:"recallmessage"},"recallMessage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"const { code } = await botInstance.recallMessage({\n    messageId: 'the message id'\n})\n")),(0,s.kt)("h2",{id:"sayrichtextmessage"},"sayRichTextMessage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst message = {\n      zh_cn: {\n        title: '\u6211\u662f\u4e00\u4e2a\u6807\u9898',\n        content: [\n          [\n            {\n              tag: 'text' as 'text',\n              un_escape: true,\n              text: '\u7b2c\u4e00\u884c&nbsp;:'\n            },\n            {\n              tag: 'a' as 'a',\n              text: '\u8d85\u94fe\u63a5',\n              href: 'http://www.feishu.cn'\n            },\n            {\n              tag: 'at' as 'at',\n              user_id: Config.development.user_id\n            }\n          ],\n          [\n            {\n              tag: 'text' as 'text',\n              text: '\u7b2c\u4e8c\u884c :'\n            },\n            {\n              tag: 'text' as 'text',\n              text: '\u6587\u672c\u6d4b\u8bd5'\n            }\n          ],\n          [\n            {\n              tag: 'img' as 'img',\n              image_key: Config.development.image_key,\n              width: 300,\n              height: 300\n            }\n          ]\n        ]\n      }\n}\n\nconst { code, data } = await botInstance.sayRichTextMessage({\n    post: message,\n    userId: 'the user your want to send',\n})\n\n")),(0,s.kt)("h2",{id:"sayurgentmessage"},"sayUrgentMessage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst { code, data } = await botInstance.sayImageMessage({\n    userId: 'the userId',\n    imageKey: 'image key'\n})\n\n{\n    const { code, invalid_open_ids } = await botInstance.sayUrgentMessage({\n        urgentType: UrgentType.SMS,\n        messageId: 'message id',\n        openIds: ['the user\\'s open id']\n    })\n}\n\n")))}p.isMDXComponent=!0}}]);